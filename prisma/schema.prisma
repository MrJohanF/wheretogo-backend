// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can change this to mysql, sqlite, etc.
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(USER)
  avatar        String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  reviews       Review[]
  favorites     Favorite[]
  categoryFavs  CategoryFavorite[]
  reservations  Reservation[]
  searchHistory SearchHistory[]
  sessions      UserSession[]
  pageViews     PageView[]
  activities    UserActivity[]
  preferences   UserPreference[]

  @@map("users")
}

model Category {
  id            Int               @id @default(autoincrement())
  name          String
  icon          String
  description   String?
  image         String?
  color         String?
  count         Int               @default(0)
  isTrending    Boolean           @default(false) @map("is_trending")
  subcategories Subcategory[]
  places        PlaceCategory[]
  favorites     CategoryFavorite[]

  @@map("categories")
}

model Subcategory {
  id          Int               @id @default(autoincrement())
  name        String
  categoryId  Int               @map("category_id")
  category    Category          @relation(fields: [categoryId], references: [id])
  places      PlaceSubcategory[]

  @@map("subcategories")
}

model Place {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  rating          Float?
  priceLevel      String?           @map("price_level")
  address         String
  phone           String?
  website         String?
  cuisine         String?
  isOpenNow       Boolean?          @default(false) @map("is_open_now")
  latitude        Float?
  longitude       Float?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  categories      PlaceCategory[]
  subcategories   PlaceSubcategory[]
  images          Image[]
  reviews         Review[]
  operatingHours  OperatingHour[]
  favorites       Favorite[]
  reservations    Reservation[]
  popularItems    PopularItem[]
  similarTo       SimilarPlace[]    @relation("place_to_similar")
  similarFrom     SimilarPlace[]    @relation("similar_to_place")
  features        PlaceFeature[]

  @@map("places")
}

model PlaceCategory {
  placeId     Int      @map("place_id")
  categoryId  Int      @map("category_id")
  place       Place    @relation(fields: [placeId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])

  @@id([placeId, categoryId])
  @@map("place_categories")
}

model PlaceSubcategory {
  placeId       Int         @map("place_id")
  subcategoryId Int         @map("subcategory_id")
  place         Place       @relation(fields: [placeId], references: [id])
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  @@id([placeId, subcategoryId])
  @@map("place_subcategories")
}

model Image {
  id        Int     @id @default(autoincrement())
  placeId   Int     @map("place_id")
  url       String
  altText   String? @map("alt_text")
  isFeatured Boolean @default(false) @map("is_featured")
  place     Place   @relation(fields: [placeId], references: [id])

  @@map("images")
}

model OperatingHour {
  id         Int    @id @default(autoincrement())
  placeId    Int    @map("place_id")
  day        String
  openingTime String @map("opening_time")
  closingTime String @map("closing_time")
  place      Place  @relation(fields: [placeId], references: [id])

  @@map("operating_hours")
}

model Review {
  id        Int      @id @default(autoincrement())
  placeId   Int      @map("place_id")
  userId    String   @map("user_id")
  rating    Int
  comment   String?
  date      DateTime
  place     Place    @relation(fields: [placeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Favorite {
  userId    String   @map("user_id")
  placeId   Int      @map("place_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  place     Place    @relation(fields: [placeId], references: [id])

  @@id([userId, placeId])
  @@map("favorites")
}

model CategoryFavorite {
  userId     String   @map("user_id")
  categoryId Int      @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([userId, categoryId])
  @@map("category_favorites")
}

model Reservation {
  id              Int      @id @default(autoincrement())
  placeId         Int      @map("place_id")
  userId          String   @map("user_id")
  date            DateTime
  time            String
  guests          Int
  name            String
  email           String
  phone           String
  specialRequests String?  @map("special_requests")
  status          String   @default("pending")
  createdAt       DateTime @default(now()) @map("created_at")
  place           Place    @relation(fields: [placeId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("reservations")
}

model PopularItem {
  id      Int    @id @default(autoincrement())
  placeId Int    @map("place_id")
  name    String
  place   Place  @relation(fields: [placeId], references: [id])

  @@map("popular_items")
}

model SimilarPlace {
  placeId        Int   @map("place_id")
  similarPlaceId Int   @map("similar_place_id")
  similarityScore Float @default(0) @map("similarity_score")
  place          Place @relation("place_to_similar", fields: [placeId], references: [id])
  similarPlace   Place @relation("similar_to_place", fields: [similarPlaceId], references: [id])

  @@id([placeId, similarPlaceId])
  @@map("similar_places")
}

model Feature {
  id     Int            @id @default(autoincrement())
  name   String
  places PlaceFeature[]

  @@map("features")
}

model PlaceFeature {
  placeId   Int     @map("place_id")
  featureId Int     @map("feature_id")
  place     Place   @relation(fields: [placeId], references: [id])
  feature   Feature @relation(fields: [featureId], references: [id])

  @@id([placeId, featureId])
  @@map("place_features")
}

model SearchHistory {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  query     String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("search_history")
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  startTime DateTime @default(now()) @map("start_time")
  endTime   DateTime? @map("end_time")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_sessions")
}

model PageView {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  path      String
  timestamp DateTime @default(now())
  duration  Int?     // Duration in seconds
  user      User     @relation(fields: [userId], references: [id])

  @@map("page_views")
}

model UserActivity {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  action    String
  details   Json?    // Flexible JSON field for additional activity details
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_activities")
}

model UserPreference {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  key       String
  value     Json
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key])
  @@map("user_preferences")
}

enum Role {
  ADMIN
  USER
  EDITOR
} 